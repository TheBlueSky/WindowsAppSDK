// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

namespace Microsoft.Windows.PushNotifications
{
    [contractversion(1)]
    apicontract PushNotificationsContract {}

    // Event args for the Push payload.
    [contract(PushNotificationsContract, 1)]
    runtimeclass PushNotificationReceivedEventArgs
    {
        // The Push payload
        byte[] Payload { get; };

        // Gets a deferral to allow push notification processing even if the system goes into low power mode.
        Windows.ApplicationModel.Background.BackgroundTaskDeferral GetDeferral();

        // Subscribe to Cancelled event handler to be signalled when resource policies are no longer true like 30s wallclock timer
        event Windows.ApplicationModel.Background.BackgroundTaskCanceledEventHandler Canceled;
    };

    [contract(PushNotificationsContract, 1)]
    enum PushNotificationChannelStatus
    {
        InProgress, // The request is in progress and there is no retry operation
        InProgressRetry, // The request is in progress and is in a backoff retry state. Check ExtendedError for HRESULT for retryable error.
        CompletedSuccess, // The request completed successfully
        CompletedFailure, // The request failed with some critical internal error. Check ExtendedError for HRESULT
    };

    // The PushNotificationChannel Progress result
    [contract(PushNotificationsContract, 1)]
    struct PushNotificationCreateChannelStatus
    {
        // Either InProgress or InProgressRetry status
        PushNotificationChannelStatus status;

        // The last extended error we failed Channel requests on that caused the inprogress retry status. E_PENDING if this is just progress status.
        HRESULT extendedError;

        // Total Retries so far
        UInt32 retryCount;
    };

    [contract(PushNotificationsContract, 1)]
    runtimeclass PushNotificationChannel
    {
        // The Channel Uri for app to Post a notification to.
        Windows.Foundation.Uri Uri { get; };

        // Expiration of the Channel
        Windows.Foundation.DateTime ExpirationTime { get; };

        // Unsubscribes the channel
        void Close();
    }

    [contract(PushNotificationsContract, 1)]
    runtimeclass PushNotificationCreateChannelResult
    {
        // The Push channel associated with the Result. Valid only if status is CompletedSuccess.
        PushNotificationChannel Channel { get; };

        // More detailed error code in addition to the ChannelStatus state.
        HRESULT ExtendedError{ get; };

        // The Status of the CreateChannel operation
        PushNotificationChannelStatus Status { get; };
    };

    [contract(PushNotificationsContract, 1)]
    runtimeclass PushNotificationManager
    {
        // Checks to see if the APIs are supported for the Desktop app
        // Certain self-contained apps may not support Push Notification scenarios by design
        static Boolean IsSupported();

        // Gets a Default instance of a PushNotificationManager
        static PushNotificationManager Default{ get; };

        // Registers an application for Notifications
        // For Unpackaged applications, registers support for protocol activations
        // For packaged applications with Background Infrastructure support, registers Push Trigger with the Background Infrastructure
        // For packaged applications without Background Infrastructure support, registers a COM Service
        void Register();

        // Packaged Apps: Force COM to launch a new process
        // Unpackaged apps: Remove the Foreground Sink to force Long Running Process Singleton to launch a new process instance.
        void Unregister();

        // Disables Push completely for Packaged and Unpackaged apps. Register() needs to be called again for Push to work
        void UnregisterAll();

        // Request a Push Channel with an encoded RemoteId from WNS. RemoteId is an AAD identifier GUID
        Windows.Foundation.IAsyncOperationWithProgress<PushNotificationCreateChannelResult, PushNotificationCreateChannelStatus> CreateChannelAsync(Guid remoteId);

        // Event handler for Push Notifications
        event Windows.Foundation.TypedEventHandler<PushNotificationManager, PushNotificationReceivedEventArgs> PushReceived;
    };
//}

//namespace Microsoft.Windows.AppNotifications.Builder
//{
    runtimeclass AppNotificationTextProperties
    {
        // Contains the set of <text> attributes
        AppNotificationTextProperties();

        AppNotificationTextProperties SetLanguage(String language);

        AppNotificationTextProperties UsesCallScenarioAlign();

        AppNotificationTextProperties SetMaxLines(Int32 maxLines);
    }

    enum AppNotificationButtonStyle
    {
        Success, // The button will be green
        Critical, // The button will be red
    };

    runtimeclass AppNotificationButton
    {
        // Button can use ToolTip instead of content which requires empty content.
        // Argument attribute is required and uses the ArgumentSerializer construct
        // to add arguments to the button.
        AppNotificationButton();
        AppNotificationButton(String content);

        AppNotificationButton AddArgument(String key, String value);

        // Sets the IconUri for the button.
        //Button SetIconUri(Windows.Foundation.Uri iconUri);

        // The tooltip for a button, if the button has an empty content string.
        //Button SetToolTip(String toolTip);

        // Sets the Button as context menu action.
        //Button UseContextMenuPlacement();

        // Sets the ButtonStyle to Success or Critical
        //Button SetButtonStyle(ButtonStyle buttonStyle);

        // Sets the ID of an existing TextBox in order to have this button display to the right of the input.
        //Button SetInputId(String inputId);

        // Launches the URI passed into the button when activated.
        //Button SetProtocolActivation(Windows.Foundation.Uri protocolUri);
        //Button SetProtocolActivation(Windows.Foundation.Uri protocolUri, String targetApplicationPfn);

        // Retrieves the XML content of the button.
        String GetXml();
    };

    enum MSWinSoundEvent
    {
        Default,
        IM,
        Mail,
        Reminder,
        SMS,
        Alarm,
        Alarm2,
        Alarm3,
        Alarm4,
        Alarm5,
        Alarm6,
        Alarm7,
        Alarm8,
        Alarm9,
        Alarm10,
        Call,
        Call2,
        Call3,
        Call4,
        Call5,
        Call6,
        Call7,
        Call8,
        Call9,
        Call10,
    };

    enum AppNotificationScenarioType
    {
        Default, // The normal AppNotification behavior. The AppNotification appears for a short duration, and then automatically dismisses into Notification Center.
        Reminder, // The notification will stay on screen until the user dismisses it or takes action.
        Alarm,    // Alarms behave like Reminder, but alarms will additionally loop audio with a default alarm sound.
        IncomingCall, // Incoming call notifications are displayed pre-expanded in a special call format and stay on the user's screen till dismissed.
        Urgent, // Important notifications allow users to have more control over what 1st party and 3rd party apps can send them high-priority AppNotifications (urgent/important) that can break through Focus Assist.
    };

    enum AppNotificationDuration
    {
        Short, // Default value. AppNotification appears for a short while and then goes into Notification Center.
        Long, // AppNotification stays on-screen for longer, and then goes into Notification Center.
    };

    runtimeclass AppNotificationContent
    {
        AppNotificationContent();

        // Adds arguments to the launch attribute to return when AppNotification is clicked.
        AppNotificationContent AddArgument(String key, String value);

        // Sets the timeStamp of the AppNotification to when it was constructed instead of when it was sent.
        //AppNotificationContent SetTimeStamp(Windows.Foundation.DateTime timeStamp);

        // Sets the scenario of the AppNotification.
        //AppNotificationContent SetScenarioType(ScenarioType scenarioType);

        // Adds text to the AppNotification.
        AppNotificationContent AddText(String text);
        AppNotificationContent AddText(String text, AppNotificationTextProperties properties);
        AppNotificationContent SetAttributionText(String text);
        AppNotificationContent SetAttributionText(String text, String language);

        // Sets the full-width inline-image that appears when you expand the AppNotification
        AppNotificationContent SetInlineImage(Windows.Foundation.Uri imageUri);
        [default_overload]
        AppNotificationContent SetInlineImage(Windows.Foundation.Uri imageUri, String alternateText);
        AppNotificationContent SetInlineImage(Windows.Foundation.Uri imageUri, Boolean useCircleCrop);
        AppNotificationContent SetInlineImage(Windows.Foundation.Uri imageUri, String alternateText, Boolean useCircleCrop);

        // Sets the image that is left-aligned with notification text
        AppNotificationContent SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri);
        [default_overload]
        AppNotificationContent SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, String alternateText);
        AppNotificationContent SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, Boolean useCircleCrop);
        AppNotificationContent SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, String alternateText, Boolean useCircleCrop);

        // Sets the image that displays within the banner of the AppNotification.
        AppNotificationContent SetHeroImage(Windows.Foundation.Uri imageUri);
        AppNotificationContent SetHeroImage(Windows.Foundation.Uri imageUri, String alternateText);

        // SetAudio
        //[default_overload]
        //AppNotificationContent SetAudio(Windows.Foundation.Uri audioUri);
        //AppNotificationContent SetAudio(MSWinSoundEvent msWinSoundEvent);
        //[default_overload]
        //AppNotificationContent SetAudio(Windows.Foundation.Uri audioUri, Duration duration);
        //AppNotificationContent SetAudio(MSWinSoundEvent msWinSoundEvent, Duration duration);
        //AppNotificationContent MuteAudio();

        // Add an input textbox to retrieve user input.
        AppNotificationContent AddTextBox(String id);
        AppNotificationContent AddTextBox(String id, String placeHolderText, String title);

        // Adds a button to the AppNotificationContent
        AppNotificationContent AddButton(AppNotificationButton button);

        // Add an input ComboBox to retrieve user input.
        //AppNotificationContent AddComboBox(ComboBox comboBox);
        //AppNotificationContent SetProgressBar(ProgressBar progressBar);

        // Retrieves the notification XML content so that it can be used with a local
        // AppNotification constructor.
        String GetXml();
    };

    runtimeclass NFAppNotificationTextProperties
    {
        // Contains the set of <text> attributes
        NFAppNotificationTextProperties();

        void SetLanguage(String language);

        void UsesCallScenarioAlign();

        void SetMaxLines(Int32 maxLines);
    }

    runtimeclass NFAppNotificationButton
    {
        // Button can use ToolTip instead of content which requires empty content.
        // Argument attribute is required and uses the ArgumentSerializer construct
        // to add arguments to the button.
        NFAppNotificationButton();
        NFAppNotificationButton(String content);

        void AddArgument(String key, String value);

        // Sets the IconUri for the button.
        //Button SetIconUri(Windows.Foundation.Uri iconUri);

        // The tooltip for a button, if the button has an empty content string.
        //Button SetToolTip(String toolTip);

        // Sets the Button as context menu action.
        //Button UseContextMenuPlacement();

        // Sets the ButtonStyle to Success or Critical
        //Button SetButtonStyle(ButtonStyle buttonStyle);

        // Sets the ID of an existing TextBox in order to have this button display to the right of the input.
        //Button SetInputId(String inputId);

        // Launches the URI passed into the button when activated.
        //Button SetProtocolActivation(Windows.Foundation.Uri protocolUri);
        //Button SetProtocolActivation(Windows.Foundation.Uri protocolUri, String targetApplicationPfn);

        // Retrieves the XML content of the button.
        String GetXml();
    };

    runtimeclass NFAppNotificationContent
    {
        NFAppNotificationContent();

        // Adds arguments to the launch attribute to return when AppNotification is clicked.
        void AddArgument(String key, String value);

        // Sets the timeStamp of the AppNotification to when it was constructed instead of when it was sent.
        //AppNotificationContent SetTimeStamp(Windows.Foundation.DateTime timeStamp);

        // Sets the scenario of the AppNotification.
        //AppNotificationContent SetScenarioType(ScenarioType scenarioType);

        // Adds text to the AppNotification.
        void AddText(String text);
        void AddText(String text, NFAppNotificationTextProperties properties);
        void SetAttributionText(String text);
        void SetAttributionText(String text, String language);

        // Sets the full-width inline-image that appears when you expand the AppNotification
        void SetInlineImage(Windows.Foundation.Uri imageUri);
        [default_overload]
        void SetInlineImage(Windows.Foundation.Uri imageUri, String alternateText);
        void SetInlineImage(Windows.Foundation.Uri imageUri, Boolean useCircleCrop);
        void SetInlineImage(Windows.Foundation.Uri imageUri, String alternateText, Boolean useCircleCrop);

        // Sets the image that is left-aligned with notification text
        void SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri);
        [default_overload]
        void SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, String alternateText);
        void SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, Boolean useCircleCrop);
        void SetAppLogoOverrideImage(Windows.Foundation.Uri imageUri, String alternateText, Boolean useCircleCrop);

        // Sets the image that displays within the banner of the AppNotification.
        void SetHeroImage(Windows.Foundation.Uri imageUri);
        void SetHeroImage(Windows.Foundation.Uri imageUri, String alternateText);

        // SetAudio
        //[default_overload]
        //AppNotificationContent SetAudio(Windows.Foundation.Uri audioUri);
        //AppNotificationContent SetAudio(MSWinSoundEvent msWinSoundEvent);
        //[default_overload]
        //AppNotificationContent SetAudio(Windows.Foundation.Uri audioUri, Duration duration);
        //AppNotificationContent SetAudio(MSWinSoundEvent msWinSoundEvent, Duration duration);
        //AppNotificationContent MuteAudio();

        // Add an input textbox to retrieve user input.
        void AddTextBox(String id);
        void AddTextBox(String id, String placeHolderText, String title);

        // Adds a button to the AppNotificationContent
        void AddButton(NFAppNotificationButton button);

        // Add an input ComboBox to retrieve user input.
        //AppNotificationContent AddComboBox(ComboBox comboBox);
        //AppNotificationContent SetProgressBar(ProgressBar progressBar);

        // Retrieves the notification XML content so that it can be used with a local
        // AppNotification constructor.
        String GetXml();
    };
}
